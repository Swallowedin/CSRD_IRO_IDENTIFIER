import streamlit as st
from typing import Dict, List
import json
from openai import OpenAI
import pandas as pd
from datetime import datetime
import io

# Configuration de la page
st.set_page_config(
    page_title="Analyseur CSRD - IRO",
    page_icon="üìä",
    layout="wide"
)

class GPTInterface:
    """Interface avec l'API GPT"""
    def __init__(self):
        try:
            self.api_key = st.secrets["OPENAI_API_KEY"]
        except KeyError:
            st.error("‚ùå Cl√© API OpenAI non trouv√©e dans les secrets Streamlit.")
            st.info("üí° Ajoutez votre cl√© API dans les secrets Streamlit avec la cl√© 'OPENAI_API_KEY'")
            st.stop()
            
        self.client = OpenAI(api_key=self.api_key)

    def generate_iros(self, context: dict) -> dict:
        """G√©n√®re des IRO via GPT"""
        prompt = self._create_prompt(context)
        
        with st.spinner('Analyse en cours et g√©n√©ration des IRO...'):
            try:
                response = self.client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=[
                        {"role": "system", "content": """Vous √™tes un expert en reporting CSRD sp√©cialis√© dans l'identification des IRO.
                        Votre r√¥le est d'analyser le profil de l'entreprise et de sugg√©rer des IRO pertinents et personnalis√©s.
                        Soyez pr√©cis et justifiez vos choix en fonction des sp√©cificit√©s de l'entreprise."""},
                        {"role": "user", "content": prompt}
                    ],
                    response_format={"type": "json_object"}
                )
                return json.loads(response.choices[0].message.content)
            except Exception as e:
                st.error(f"Erreur lors de la g√©n√©ration des IRO: {str(e)}")
                return {}

    def _create_prompt(self, context: dict) -> str:
        return f"""
        Analysez le profil d'entreprise suivant et identifiez les IRO les plus pertinents:

        PROFIL DE L'ENTREPRISE:
        {context['company_description']}

        SECTEUR D'ACTIVIT√â:
        {context['industry_sector']}

        MOD√àLE D'AFFAIRES:
        {context['business_model']}

        CARACT√âRISTIQUES SP√âCIFIQUES:
        {context['specific_features']}

        ENJEUX PRIORITAIRES IDENTIFI√âS:
        {json.dumps(context['priority_issues'], indent=2, ensure_ascii=False)}

        Pour chaque enjeu identifi√©, fournissez une r√©ponse JSON structur√©e avec:
        {{
            "pilier_esg": {{
                "enjeu": {{
                    "iros": ["liste d'IRO pertinents et sp√©cifiques"],
                    "importance": "Haute/Moyenne/Basse",
                    "justification": "Explication d√©taill√©e de la pertinence par rapport au profil",
                    "m√©thodologie_collecte": "Comment collecter cet indicateur dans ce contexte sp√©cifique",
                    "fr√©quence_mesure": "Fr√©quence recommand√©e de mesure",
                    "points_attention": "Points sp√©cifiques √† surveiller pour cet IRO dans ce contexte"
                }}
            }}
        }}
        """

def initialize_session_state():
    """Initialise les variables de session Streamlit"""
    if 'gpt' not in st.session_state:
        st.session_state.gpt = GPTInterface()
    if 'results' not in st.session_state:
        st.session_state.results = None

def company_profile_section():
    """Section pour la description d√©taill√©e de l'entreprise"""
    st.header("üìã Profil de l'entreprise")
    
    company_description = st.text_area(
        "Description g√©n√©rale de l'entreprise",
        height=150,
        help="D√©crivez votre entreprise en d√©tail (taille, march√©s, implantation g√©ographique, etc.)"
    )
    
    col1, col2 = st.columns(2)
    
    with col1:
        industry_sector = st.text_area(
            "Secteur d'activit√©",
            height=100,
            help="D√©crivez votre secteur d'activit√© et ses sp√©cificit√©s"
        )
    
    with col2:
        business_model = st.text_area(
            "Mod√®le d'affaires",
            height=100,
            help="Expliquez votre mod√®le d'affaires et sa cha√Æne de valeur"
        )
    
    specific_features = st.text_area(
        "Caract√©ristiques sp√©cifiques",
        height=150,
        help="D√©taillez les particularit√©s qui distinguent votre entreprise (innovation, technologies, contraintes r√©glementaires, etc.)"
    )
    
    return {
        "company_description": company_description,
        "industry_sector": industry_sector,
        "business_model": business_model,
        "specific_features": specific_features
    }

def priority_issues_section():
    """Section pour identifier les enjeux prioritaires"""
    st.header("üéØ Enjeux prioritaires")
    
    st.info("Identifiez et d√©crivez les enjeux ESG prioritaires pour votre entreprise")
    
    environmental_issues = st.text_area(
        "Enjeux environnementaux",
        height=100,
        help="D√©crivez les enjeux environnementaux sp√©cifiques √† votre activit√©"
    )
    
    social_issues = st.text_area(
        "Enjeux sociaux",
        height=100,
        help="D√©crivez les enjeux sociaux et soci√©taux pertinents"
    )
    
    governance_issues = st.text_area(
        "Enjeux de gouvernance",
        height=100,
        help="D√©crivez les enjeux de gouvernance importants"
    )
    
    return {
        "environmental": environmental_issues,
        "social": social_issues,
        "governance": governance_issues
    }

def display_results(results: Dict):
    """Affiche les r√©sultats de l'analyse"""
    st.header("üìä R√©sultats de l'analyse")
    
    if not results:
        st.warning("Aucun r√©sultat √† afficher")
        return
    
    # Cr√©ation d'un DataFrame pour l'export
    rows = []
    
    for pilier, enjeux in results.items():
        st.subheader(f"Pilier : {pilier}")
        
        for enjeu, details in enjeux.items():
            with st.expander(f"Enjeu : {enjeu}"):
                st.write("**IROs recommand√©s :**")
                for iro in details["iros"]:
                    st.write(f"- {iro}")
                
                st.write(f"**Importance :** {details['importance']}")
                st.write(f"**Justification :** {details['justification']}")
                st.write(f"**M√©thodologie de collecte :** {details['m√©thodologie_collecte']}")
                st.write(f"**Fr√©quence de mesure :** {details['fr√©quence_mesure']}")
                st.write(f"**Points d'attention :** {details['points_attention']}")
            
            # Ajout des donn√©es pour l'export
            for iro in details["iros"]:
                rows.append({
                    "Pilier": pilier,
                    "Enjeu": enjeu,
                    "IRO": iro,
                    "Importance": details["importance"],
                    "Justification": details["justification"],
                    "M√©thodologie": details["m√©thodologie_collecte"],
                    "Fr√©quence": details["fr√©quence_mesure"],
                    "Points d'attention": details["points_attention"]
                })
    
    # Export Excel
    if rows:
        df = pd.DataFrame(rows)
        buffer = io.BytesIO()
        with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name='Analyse IRO')
        
        st.download_button(
            label="üì• T√©l√©charger les r√©sultats (Excel)",
            data=buffer.getvalue(),
            file_name=f"analyse_iro_csrd_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

def main():
    st.title("üéØ Analyseur CSRD - Identification des IRO")
    
    initialize_session_state()
    
    with st.sidebar:
        st.header("‚ÑπÔ∏è Guide d'utilisation")
        st.write("""
        1. D√©crivez votre entreprise en d√©tail
        2. Identifiez vos enjeux prioritaires
        3. Lancez l'analyse pour obtenir des IRO personnalis√©s
        """)
        
        st.header("üí° Conseils")
        st.write("""
        - Soyez pr√©cis dans vos descriptions
        - N'h√©sitez pas √† mentionner les sp√©cificit√©s
        - Pensez √† long terme dans l'identification des enjeux
        """)
    
    # Sections principales
    company_profile = company_profile_section()
    priority_issues = priority_issues_section()
    
    # Bouton d'analyse
    if st.button("üîç Lancer l'analyse"):
        if not all([company_profile["company_description"], 
                   company_profile["industry_sector"],
                   priority_issues["environmental"] or 
                   priority_issues["social"] or 
                   priority_issues["governance"]]):
            st.error("Veuillez remplir au moins la description de l'entreprise, le secteur d'activit√© et un enjeu prioritaire")
            return
        
        context = {
            **company_profile,
            "priority_issues": priority_issues
        }
        
        st.session_state.results = st.session_state.gpt.generate_iros(context)
        
    # Affichage des r√©sultats
    if st.session_state.results:
        display_results(st.session_state.results)

if __name__ == "__main__":
    main()
