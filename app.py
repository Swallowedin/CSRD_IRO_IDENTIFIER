import streamlit as st
from typing import Dict, List
import json
from openai import OpenAI
import pandas as pd
from datetime import datetime
import io

# Configuration de la page
st.set_page_config(
    page_title="Analyseur CSRD - IRO",
    page_icon="üìä",
    layout="wide"
)

class GPTInterface:
    """Interface avec l'API GPT"""
    def __init__(self):
        try:
            self.api_key = st.secrets["OPENAI_API_KEY"]
        except KeyError:
            st.error("‚ùå Cl√© API OpenAI non trouv√©e dans les secrets Streamlit.")
            st.info("üí° Ajoutez votre cl√© API dans les secrets Streamlit avec la cl√© 'OPENAI_API_KEY'")
            st.stop()
            
        self.client = OpenAI(api_key=self.api_key)

    def generate_iros(self, context: dict) -> dict:
        """G√©n√®re des IRO via GPT"""
        prompt = self._create_prompt(context)
        
        with st.spinner('Analyse en cours et g√©n√©ration des IRO...'):
            try:
                response = self.client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=[
                        {"role": "system", "content": "Vous √™tes un expert en reporting CSRD sp√©cialis√© dans l'identification des IRO. Analysez en profondeur chaque enjeu mentionn√© pour fournir une analyse CSRD compl√®te."},
                        {"role": "user", "content": prompt}
                    ],
                    response_format={"type": "json_object"}
                )
                return json.loads(response.choices[0].message.content)
            except Exception as e:
                st.error(f"Erreur lors de la g√©n√©ration des IRO: {str(e)}")
                return {}

    def _create_prompt(self, context: dict) -> str:
        return f"""
        En tant qu'expert CSRD, analysez en d√©tail ce profil d'entreprise et g√©n√©rez une analyse d√©taill√©e selon le format demand√©.

        PROFIL DE L'ENTREPRISE:
        {context['company_description']}

        SECTEUR D'ACTIVIT√â:
        {context['industry_sector']}

        MOD√àLE D'AFFAIRES:
        {context['business_model']}

        CARACT√âRISTIQUES SP√âCIFIQUES:
        {context['specific_features']}

        ENJEUX IDENTIFI√âS:
        Environnement: {context['priority_issues']['environmental']}
        Social: {context['priority_issues']['social']}
        Gouvernance: {context['priority_issues']['governance']}

        Pour chaque ENJEU MENTIONN√â dans les textes ci-dessus, r√©alisez une analyse CSRD compl√®te selon cette structure JSON exacte :

        {{
            "nom_du_pilier": {{ // environnement, social, ou gouvernance
                "nom_de_l_enjeu": {{
                    "description": "Description d√©taill√©e de l'enjeu",
                    "impacts": {{
                        "positifs": [
                            "Impact positif 1 li√© au mod√®le d'affaires",
                            "Impact positif 2 li√© au mod√®le d'affaires"
                        ],
                        "negatifs": [
                            "Impact n√©gatif 1 li√© au mod√®le d'affaires",
                            "Impact n√©gatif 2 li√© au mod√®le d'affaires"
                        ]
                    }},
                    "risques": {{
                        "liste": [
                            "Description risque 1",
                            "Description risque 2"
                        ],
                        "niveau": "√âlev√©/Moyen/Faible",
                        "horizon": "Court/Moyen/Long terme",
                        "mesures_attenuation": [
                            "Mesure 1 pour att√©nuer les risques",
                            "Mesure 2 pour att√©nuer les risques"
                        ]
                    }},
                    "opportunites": {{
                        "liste": [
                            "Description opportunit√© 1",
                            "Description opportunit√© 2"
                        ],
                        "potentiel": "√âlev√©/Moyen/Faible",
                        "horizon": "Court/Moyen/Long terme",
                        "actions_saisie": [
                            "Action 1 pour saisir l'opportunit√©",
                            "Action 2 pour saisir l'opportunit√©"
                        ]
                    }},
                    "iros": [
                        {{
                            "indicateur": "Nom de l'IRO 1",
                            "description": "Description d√©taill√©e de l'indicateur",
                            "methodologie": "Comment collecter et calculer",
                            "frequence": "Fr√©quence de mesure",
                            "objectifs": {{
                                "court_terme": "Objectif √† 1 an",
                                "moyen_terme": "Objectif √† 3 ans",
                                "long_terme": "Objectif √† 5 ans"
                            }}
                        }}
                    ]
                }}
            }}
        }}

        EXEMPLE CONCRET pour un enjeu :
        {{
            "environnement": {{
                "emissions_ges": {{
                    "description": "Gestion et r√©duction des √©missions de gaz √† effet de serre dans les op√©rations",
                    "impacts": {{
                        "positifs": [
                            "D√©veloppement de solutions bas-carbone innovantes",
                            "Am√©lioration de l'efficacit√© √©nerg√©tique"
                        ],
                        "negatifs": [
                            "√âmissions directes li√©es aux activit√©s de production",
                            "√âmissions indirectes de la cha√Æne logistique"
                        ]
                    }},
                    "risques": {{
                        "liste": [
                            "Augmentation des co√ªts li√©s √† la tarification carbone",
                            "Perte de parts de march√© face aux alternatives plus vertes"
                        ],
                        "niveau": "√âlev√©",
                        "horizon": "Moyen terme",
                        "mesures_attenuation": [
                            "Programme de r√©duction des √©missions",
                            "Investissement dans les √©nergies renouvelables"
                        ]
                    }},
                    "opportunites": {{
                        "liste": [
                            "D√©veloppement de produits √©co-con√ßus",
                            "Acc√®s √† de nouveaux march√©s verts"
                        ],
                        "potentiel": "√âlev√©",
                        "horizon": "Moyen terme",
                        "actions_saisie": [
                            "Programme R&D produits bas-carbone",
                            "Certification environnementale"
                        ]
                    }},
                    "iros": [
                        {{
                            "indicateur": "Intensit√© carbone par unit√© produite",
                            "description": "Mesure des √©missions de GES par unit√© de production",
                            "methodologie": "Calcul selon GHG Protocol",
                            "frequence": "Trimestrielle",
                            "objectifs": {{
                                "court_terme": "-10% en 1 an",
                                "moyen_terme": "-30% en 3 ans",
                                "long_terme": "-50% en 5 ans"
                            }}
                        }}
                    ]
                }}
            }}
        }}

        IMPORTANT :
        1. Analysez CHAQUE enjeu mentionn√© dans les textes fournis
        2. Suivez EXACTEMENT la structure JSON donn√©e
        3. Adaptez le contenu au contexte sp√©cifique de l'entreprise
        4. Soyez PR√âCIS et CONCRET dans les descriptions"""

def company_profile_section():
    """Section pour la description d√©taill√©e de l'entreprise"""
    st.header("üìã Profil de l'entreprise")
    
    company_description = st.text_area(
        "Description g√©n√©rale de l'entreprise",
        height=150,
        help="D√©crivez votre entreprise en d√©tail (taille, march√©s, implantation g√©ographique, etc.)"
    )
    
    col1, col2 = st.columns(2)
    
    with col1:
        industry_sector = st.text_area(
            "Secteur d'activit√©",
            height=100,
            help="D√©crivez votre secteur d'activit√© et ses sp√©cificit√©s"
        )
    
    with col2:
        business_model = st.text_area(
            "Mod√®le d'affaires",
            height=100,
            help="Expliquez votre mod√®le d'affaires et sa cha√Æne de valeur"
        )
    
    specific_features = st.text_area(
        "Caract√©ristiques sp√©cifiques",
        height=150,
        help="D√©taillez les particularit√©s qui distinguent votre entreprise (innovation, technologies, contraintes r√©glementaires, etc.)"
    )
    
    return {
        "company_description": company_description,
        "industry_sector": industry_sector,
        "business_model": business_model,
        "specific_features": specific_features
    }

def priority_issues_section():
    """Section pour identifier les enjeux prioritaires"""
    st.header("üéØ Enjeux prioritaires")
    
    st.info("Identifiez et d√©crivez les enjeux ESG prioritaires pour votre entreprise")
    
    environmental_issues = st.text_area(
        "Enjeux environnementaux",
        height=100,
        help="D√©crivez les enjeux environnementaux sp√©cifiques √† votre activit√©"
    )
    
    social_issues = st.text_area(
        "Enjeux sociaux",
        height=100,
        help="D√©crivez les enjeux sociaux et soci√©taux pertinents"
    )
    
    governance_issues = st.text_area(
        "Enjeux de gouvernance",
        height=100,
        help="D√©crivez les enjeux de gouvernance importants"
    )
    
    return {
        "environmental": environmental_issues,
        "social": social_issues,
        "governance": governance_issues
    }

def display_results(results: Dict):
    """Affiche les r√©sultats de l'analyse"""
    st.header("üìä Analyse CSRD d√©taill√©e")
    
    if not results:
        st.warning("Aucun r√©sultat √† afficher")
        return
    
    # Debug: afficher la structure des r√©sultats
    st.write("Structure des r√©sultats re√ßus:", results)
    
    rows = []  # Pour l'export Excel
    
    # D√©finition des piliers
    pillars = {
        "environnement": "üåç Environnement",
        "social": "üë• Social",
        "gouvernance": "‚öñÔ∏è Gouvernance"
    }
    
    # Cr√©ation des tabs pour les piliers
    tabs = st.tabs([name for _, name in pillars.items()])
    
    for (pilier_id, pilier_name), tab in zip(pillars.items(), tabs):
        if pilier_id in results:
            with tab:
                for enjeu, details in results[pilier_id].items():
                    st.subheader(f"üéØ Enjeu : {enjeu}")
                    
                    # On v√©rifie chaque cl√© avant de l'utiliser
                    if "description" in details:
                        st.markdown("### üìù Description")
                        st.write(details["description"])
                    
                    if "impacts" in details:
                        st.markdown("### üí´ Impacts")
                        col1, col2 = st.columns(2)
                        with col1:
                            st.markdown("#### ‚úÖ Impacts positifs")
                            if "positifs" in details["impacts"]:
                                for impact in details["impacts"]["positifs"]:
                                    st.write(f"- {impact}")
                        with col2:
                            st.markdown("#### ‚ùå Impacts n√©gatifs")
                            if "negatifs" in details["impacts"]:
                                for impact in details["impacts"]["negatifs"]:
                                    st.write(f"- {impact}")
                    
                    if "risques" in details:
                        st.markdown("### ‚ö†Ô∏è Risques")
                        if "niveau" in details["risques"]:
                            st.write(f"**Niveau de risque :** {details['risques']['niveau']}")
                        if "horizon" in details["risques"]:
                            st.write(f"**Horizon :** {details['risques']['horizon']}")
                        if "liste" in details["risques"]:
                            for risque in details["risques"]["liste"]:
                                st.write(f"- {risque}")
                        if "mesures_attenuation" in details["risques"]:
                            st.markdown("#### üõ°Ô∏è Mesures d'att√©nuation")
                            for mesure in details["risques"]["mesures_attenuation"]:
                                st.write(f"- {mesure}")
                    
                    if "opportunites" in details:
                        st.markdown("### üéØ Opportunit√©s")
                        if "potentiel" in details["opportunites"]:
                            st.write(f"**Potentiel :** {details['opportunites']['potentiel']}")
                        if "horizon" in details["opportunites"]:
                            st.write(f"**Horizon :** {details['opportunites']['horizon']}")
                        if "liste" in details["opportunites"]:
                            for opportunite in details["opportunites"]["liste"]:
                                st.write(f"- {opportunite}")
                        if "actions_saisie" in details["opportunites"]:
                            st.markdown("#### üöÄ Actions propos√©es")
                            for action in details["opportunites"]["actions_saisie"]:
                                st.write(f"- {action}")
                    
                    if "iros" in details:
                        st.markdown("### üìä Indicateurs de R√©sultat (IRO)")
                        for iro in details["iros"]:
                            if isinstance(iro, dict):  # V√©rifie si iro est un dictionnaire
                                st.markdown(f"#### üìå {iro.get('indicateur', 'IRO')}")
                                if "description" in iro:
                                    st.write(f"**Description :** {iro['description']}")
                                if "methodologie" in iro:
                                    st.write(f"**M√©thodologie :** {iro['methodologie']}")
                                if "frequence" in iro:
                                    st.write(f"**Fr√©quence :** {iro['frequence']}")
                                if "objectifs" in iro:
                                    st.markdown("**Objectifs :**")
                                    obj = iro["objectifs"]
                                    if "court_terme" in obj:
                                        st.write(f"- Court terme : {obj['court_terme']}")
                                    if "moyen_terme" in obj:
                                        st.write(f"- Moyen terme : {obj['moyen_terme']}")
                                    if "long_terme" in obj:
                                        st.write(f"- Long terme : {obj['long_terme']}")
                            else:  # Si iro est une cha√Æne simple
                                st.markdown(f"#### üìå {iro}")
                            
                            # Ajout pour l'export Excel
                            row_data = {
                                "Pilier": pilier_name,
                                "Enjeu": enjeu
                            }
                            
                            if isinstance(iro, dict):
                                row_data.update({
                                    "IRO": iro.get('indicateur', ''),
                                    "Description IRO": iro.get('description', ''),
                                    "M√©thodologie": iro.get('methodologie', ''),
                                    "Fr√©quence": iro.get('frequence', ''),
                                    "Objectif CT": iro.get('objectifs', {}).get('court_terme', ''),
                                    "Objectif MT": iro.get('objectifs', {}).get('moyen_terme', ''),
                                    "Objectif LT": iro.get('objectifs', {}).get('long_terme', '')
                                })
                            else:
                                row_data["IRO"] = str(iro)
                            
                            row_data.update({
                                "Niveau Risque": details.get('risques', {}).get('niveau', ''),
                                "Horizon Risque": details.get('risques', {}).get('horizon', ''),
                                "Potentiel Opportunit√©": details.get('opportunites', {}).get('potentiel', ''),
                                "Horizon Opportunit√©": details.get('opportunites', {}).get('horizon', '')
                            })
                            
                            rows.append(row_data)
                    
                    st.divider()
    
    # Export Excel
    if rows:
        df = pd.DataFrame(rows)
        buffer = io.BytesIO()
        with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name='Analyse CSRD')
        
        st.download_button(
            label="üì• T√©l√©charger l'analyse compl√®te (Excel)",
            data=buffer.getvalue(),
            file_name=f"analyse_csrd_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

def initialize_session_state():
    """Initialise les variables de session Streamlit"""
    if 'gpt' not in st.session_state:
        st.session_state.gpt = GPTInterface()
    if 'results' not in st.session_state:
        st.session_state.results = None

def main():
    st.title("üéØ Analyseur CSRD - Identification des IRO")
    
    initialize_session_state()
    
    with st.sidebar:
        st.header("‚ÑπÔ∏è Guide d'utilisation")
        st.write("""
        1. D√©crivez votre entreprise en d√©tail
        2. Identifiez vos enjeux prioritaires
        3. Lancez l'analyse pour obtenir des IRO personnalis√©s
        """)
        
        st.header("üí° Conseils")
        st.write("""
        - Soyez pr√©cis dans vos descriptions
        - N'h√©sitez pas √† mentionner les sp√©cificit√©s
        - Pensez √† long terme dans l'identification des enjeux
        """)
    
    # Sections principales
    company_profile = company_profile_section()
    priority_issues = priority_issues_section()
    
    # Bouton d'analyse
    if st.button("üîç Lancer l'analyse"):
        if not all([company_profile["company_description"], 
                   company_profile["industry_sector"],
                   priority_issues["environmental"] or 
                   priority_issues["social"] or 
                   priority_issues["governance"]]):
            st.error("Veuillez remplir au moins la description de l'entreprise, le secteur d'activit√© et un enjeu prioritaire")
            return
        
        context = {
            **company_profile,
            "priority_issues": priority_issues
        }
        
        st.session_state.results = st.session_state.gpt.generate_iros(context)
        
    # Affichage des r√©sultats
    if st.session_state.results:
        display_results(st.session_state.results)

if __name__ == "__main__":
    main()
