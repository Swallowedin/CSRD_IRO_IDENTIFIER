import streamlit as st
from typing import Dict, List
import json
from openai import OpenAI
import pandas as pd
from datetime import datetime
import io
import time

# Configuration de la page
st.set_page_config(
    page_title="Analyseur CSRD - IRO",
    page_icon="üìä",
    layout="wide"
)

class GPTInterface:
    """Interface avec l'API GPT pour l'analyse CSRD"""
    
    def __init__(self):
        try:
            self.api_key = st.secrets["OPENAI_API_KEY"]
        except KeyError:
            st.error("‚ùå Cl√© API OpenAI non trouv√©e dans les secrets Streamlit.")
            st.info("üí° Ajoutez votre cl√© API dans les secrets Streamlit avec la cl√© 'OPENAI_API_KEY'")
            st.stop()
            
        self.client = OpenAI(api_key=self.api_key)

    def clean_json_string(self, json_str: str) -> str:
        """Nettoie une cha√Æne JSON potentiellement mal form√©e de mani√®re plus robuste"""
        # √âtape 1: Nettoyage des sauts de ligne et espaces probl√©matiques
        lines = json_str.split('\n')
        cleaned_lines = []
        in_string = False
        escape_next = False
        
        for line in lines:
            cleaned_line = ''
            for char in line:
                if char == '\\' and not escape_next:
                    escape_next = True
                    cleaned_line += char
                    continue
                    
                if char == '"' and not escape_next:
                    in_string = not in_string
                    
                if in_string or char not in ('\n', '\r', '\t'):
                    cleaned_line += char
                    
                escape_next = False
                
            cleaned_lines.append(cleaned_line)
        
        cleaned = ' '.join(cleaned_lines)
        
        # √âtape 2: √âquilibrage des guillemets
        quote_positions = []
        backslash_positions = []
        for i, char in enumerate(cleaned):
            if char == '\\':
                backslash_positions.append(i)
            elif char == '"' and i-1 not in backslash_positions:
                quote_positions.append(i)
        
        # Si nombre impair de guillemets, ajout d'un guillemet final
        if len(quote_positions) % 2 != 0:
            last_quote = quote_positions[-1]
            next_brace = cleaned.find('}', last_quote)
            if next_brace != -1:
                cleaned = cleaned[:next_brace] + '"' + cleaned[next_brace:]
            else:
                cleaned += '"'
        
        # √âtape 3: √âquilibrage des accolades
        stack = []
        for i, char in enumerate(cleaned):
            if char == '{':
                stack.append(char)
            elif char == '}':
                if stack:
                    stack.pop()
                
        # Ajout des accolades manquantes
        cleaned += '}' * len(stack)
        
        # √âtape 4: Validation finale de la structure
        try:
            # Tentative de parse pour v√©rifier la validit√©
            json.loads(cleaned)
            return cleaned
        except json.JSONDecodeError as e:
            # Si erreur, tentative de correction suppl√©mentaire
            if "Expecting ',' delimiter" in str(e):
                pos = int(str(e).split('char ')[-1].strip())
                cleaned = cleaned[:pos] + ',' + cleaned[pos:]
                
            # V√©rification des objets non ferm√©s
            if cleaned.count('{') > cleaned.count('}'):
                cleaned += '}' * (cleaned.count('{') - cleaned.count('}'))
            
            return cleaned

    def generate_iros(self, context: dict) -> dict:
        """G√©n√®re l'analyse IRO (Impact, Risques, Opportunit√©s) via GPT"""
        prompt = self._create_prompt(context)
        
        with st.spinner('Analyse des impacts, risques et opportunit√©s en cours...'):
            progress_bar = st.progress(0)
            try:
                # Premier appel pour la structure
                first_response = self.client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=[
                        {"role": "system", "content": """Vous √™tes un expert en reporting CSRD. Pour chacun des enjeux mentionn√©s, 
                        identifiez UNIQUEMENT les grands domaines d'impact, sans les d√©tailler. 
                        Votre r√¥le est d'√©tablir une premi√®re structure qui sera enrichie ensuite."""},
                        {"role": "user", "content": prompt}
                    ],
                    response_format={"type": "json_object"},
                    temperature=0.5
                )

                progress_bar.progress(33)

                # Deuxi√®me appel pour enrichir chaque enjeu
                response = self.client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=[
                        {"role": "system", "content": """Vous √™tes un expert en reporting CSRD sp√©cialis√© dans l'analyse exhaustive.
                        R√àGLE ABSOLUE: Pour chaque cat√©gorie (impacts positifs, impacts n√©gatifs, risques, opportunit√©s), 
                        vous DEVEZ fournir entre 5 et 10 √©l√©ments.
                        La r√©ponse sera rejet√©e si elle contient moins de 5 √©l√©ments par cat√©gorie.
                        
                        Chaque √©l√©ment doit √™tre :
                        1. D√©taill√© et explicite (pas de descriptions vagues)
                        2. Sp√©cifique √† l'enjeu trait√©
                        3. Actionnable et mesurable quand applicable"""},
                        {"role": "assistant", "content": first_response.choices[0].message.content},
                        {"role": "user", "content": """Enrichissez CHAQUE enjeu avec au minimum 5 √©l√©ments par cat√©gorie.
                        
                        FORMAT STRICT √Ä RESPECTER:
                        - Au moins 5 impacts positifs par enjeu
                        - Au moins 5 impacts n√©gatifs par enjeu
                        - Au moins 5 risques identifi√©s par enjeu
                        - Au moins 5 mesures d'att√©nuation par enjeu
                        - Au moins 5 opportunit√©s par enjeu
                        - Au moins 5 actions propos√©es par enjeu
                        
                        ATTENTION: Je refuse cat√©goriquement toute r√©ponse avec moins de 5 √©l√©ments par cat√©gorie.
                        
                        Les datapoints CSRD doivent TOUS citer les paragraphes de r√©f√©rence de la CSRD."""}
                    ],
                    response_format={"type": "json_object"},
                    temperature=0.7,
                    max_tokens=4000
                )

                progress_bar.progress(66)
                raw_content = response.choices[0].message.content

                try:
                    # Premier essai avec le JSON brut
                    result = json.loads(raw_content)
                except json.JSONDecodeError as e:
                    st.warning(f"Tentative de r√©paration du JSON... Erreur initiale: {str(e)}")
                    
                    # Tentative de nettoyage et nouveau parse
                    cleaned_content = self.clean_json_string(raw_content)
                    try:
                        result = json.loads(cleaned_content)
                    except json.JSONDecodeError as e2:
                        st.error(f"Impossible de r√©parer le JSON: {str(e2)}")
                        st.error("Contenu JSON probl√©matique:")
                        st.code(raw_content)
                        return {}

                progress_bar.progress(100)

                # Validation stricte du nombre d'√©l√©ments
                for pilier, enjeux in result.items():
                    for enjeu, details in enjeux.items():
                        if len(details.get('impacts', {}).get('positifs', [])) < 5:
                            st.error(f"‚ùå R√©ponse rejet√©e : moins de 5 impacts positifs pour {enjeu}")
                            return self.generate_iros(context)  # Nouvelle tentative
                        if len(details.get('impacts', {}).get('negatifs', [])) < 5:
                            st.error(f"‚ùå R√©ponse rejet√©e : moins de 5 impacts n√©gatifs pour {enjeu}")
                            return self.generate_iros(context)  # Nouvelle tentative
                        if len(details.get('risques', {}).get('liste', [])) < 5:
                            st.error(f"‚ùå R√©ponse rejet√©e : moins de 5 risques pour {enjeu}")
                            return self.generate_iros(context)  # Nouvelle tentative
                        if len(details.get('risques', {}).get('mesures_attenuation', [])) < 5:
                            st.error(f"‚ùå R√©ponse rejet√©e : moins de 5 mesures d'att√©nuation pour {enjeu}")
                            return self.generate_iros(context)  # Nouvelle tentative
                        if len(details.get('opportunites', {}).get('liste', [])) < 5:
                            st.error(f"‚ùå R√©ponse rejet√©e : moins de 5 opportunit√©s pour {enjeu}")
                            return self.generate_iros(context)  # Nouvelle tentative
                        if len(details.get('opportunites', {}).get('actions_saisie', [])) < 5:
                            st.error(f"‚ùå R√©ponse rejet√©e : moins de 5 actions pour {enjeu}")
                            return self.generate_iros(context)  # Nouvelle tentative

                return result

            except Exception as e:
                st.error(f"Erreur lors de la g√©n√©ration des IRO: {str(e)}")
                st.error("D√©tails de l'erreur pour le d√©bogage:")
                st.exception(e)
                return {}
            finally:
                progress_bar.empty()

    def _create_prompt(self, context: dict) -> str:
        """Cr√©e le prompt pour l'analyse CSRD"""
        return f"""
        En tant qu'expert CSRD, analysez TOUS les enjeux mentionn√©s dans les textes fournis.
        Pour CHAQUE enjeu mentionn√©, vous devez fournir une analyse compl√®te des impacts, risques et opportunit√©s.

        PROFIL DE L'ENTREPRISE:
        {context['company_description']}

        SECTEUR D'ACTIVIT√â:
        {context['industry_sector']}

        MOD√àLE D'AFFAIRES:
        {context['business_model']}

        CARACT√âRISTIQUES SP√âCIFIQUES:
        {context['specific_features']}

        ENJEUX √Ä ANALYSER:
        [IMPORTANT: Analyser TOUS les enjeux mentionn√©s ci-dessous]
        
        Environnement: {context['priority_issues']['environmental']}
        Social: {context['priority_issues']['social']}
        Gouvernance: {context['priority_issues']['governance']}

        Format JSON STRICT √† respecter:
        {{
            "environnement": {{
                "nom_enjeu_1": {{
                    "description": "Description d√©taill√©e de l'enjeu",
                    "impacts": {{
                        "positifs": [
                            "Premier impact positif d√©taill√©",
                            "Deuxi√®me impact positif d√©taill√©",
                            "Troisi√®me impact positif d√©taill√©",
                            "Quatri√®me impact positif d√©taill√©",
                            "Cinqui√®me impact positif d√©taill√©",
                            "Sixi√®me impact positif si pertinent",
                            "Septi√®me impact positif si pertinent",
                            "Huiti√®me impact positif si pertinent",
                            "Neuvi√®me impact positif si pertinent",
                            "Dixi√®me impact positif si pertinent"
                        ],
                        "negatifs": [
                            "Premier impact n√©gatif d√©taill√©",
                            "Deuxi√®me impact n√©gatif d√©taill√©",
                            "Troisi√®me impact n√©gatif d√©taill√©",
                            "Quatri√®me impact n√©gatif d√©taill√©",
                            "Cinqui√®me impact n√©gatif d√©taill√©",
                            "Sixi√®me impact n√©gatif si pertinent",
                            "Septi√®me impact n√©gatif si pertinent",
                            "Huiti√®me impact n√©gatif si pertinent",
                            "Neuvi√®me impact n√©gatif si pertinent",
                            "Dixi√®me impact n√©gatif si pertinent"
                        ]
                    }},
                    "risques": {{
                        "liste": [
                            "Premier risque identifi√© et d√©taill√©",
                            "Deuxi√®me risque identifi√© et d√©taill√©",
                            "Troisi√®me risque identifi√© et d√©taill√©",
                            "Quatri√®me risque identifi√© et d√©taill√©",
                            "Cinqui√®me risque identifi√© et d√©taill√©",
                            "Sixi√®me risque si pertinent",
                            "Septi√®me risque si pertinent",
                            "Huiti√®me risque si pertinent",
                            "Neuvi√®me risque si pertinent",
                            "Dixi√®me risque si pertinent"
                        ],
                        "niveau": "√âlev√©/Moyen/Faible",
                        "horizon": "Court/Moyen/Long terme",
                        "mesures_attenuation": [
                            "Premi√®re mesure d'att√©nuation d√©taill√©e",
                            "Deuxi√®me mesure d'att√©nuation d√©taill√©e",
                            "Troisi√®me mesure d'att√©nuation d√©taill√©e",
                            "Quatri√®me mesure d'att√©nuation d√©taill√©e",
                            "Cinqui√®me mesure d'att√©nuation d√©taill√©e",
                            "Sixi√®me mesure si pertinente",
                            "Septi√®me mesure si pertinente",
                            "Huiti√®me mesure si pertinente",
                            "Neuvi√®me mesure si pertinente",
                            "Dixi√®me mesure si pertinente"
                        ]
                    }},
                    "opportunites": {{
                        "liste": [
                            "Premi√®re opportunit√© identifi√©e et d√©taill√©e",
                            "Deuxi√®me opportunit√© identifi√©e et d√©taill√©e",
                            "Troisi√®me opportunit√© identifi√©e et d√©taill√©e",
                            "Quatri√®me opportunit√© identifi√©e et d√©taill√©e",
                            "Cinqui√®me opportunit√© identifi√©e et d√©taill√©e",
                            "Sixi√®me opportunit√© si pertinente",
                            "Septi√®me opportunit√© si pertinente",
                            "Huiti√®me opportunit√© si pertinente",
                            "Neuvi√®me opportunit√© si pertinente",
                            "Dixi√®me opportunit√© si pertinente"
                        ],
                        "potentiel": "√âlev√©/Moyen/Faible",
                        "horizon": "Court/Moyen/Long terme",
                        "actions_saisie": [
                            "Premi√®re action propos√©e et d√©taill√©e",
                            "Deuxi√®me action propos√©e et d√©taill√©e",
                            "Troisi√®me action propos√©e et d√©taill√©e",
                            "Quatri√®me action propos√©e et d√©taill√©e",
                            "Cinqui√®me action propos√©e et d√©taill√©e",
                            "Sixi√®me action si pertinente",
                            "Septi√®me action si pertinente",
                            "Huiti√®me action si pertinente",
                            "Neuvi√®me action si pertinente",
                            "Dixi√®me action si pertinente"
                        ]
                    }},
                    "datapoints_csrd": [
                        {{
                            "indicateur": "Nom du datapoint",
                            "type": "KPI quantitatif ou texte narratif",
                            "reference_csrd": "Paragraphe CSRD correspondant",
                            "description": "Description du datapoint",
                            "methodologie": "M√©thodologie de collecte/calcul",
                            "frequence": "Fr√©quence de mesure",
                            "objectifs": {{
                                "court_terme": "Objectif √† 1 an",
                                "moyen_terme": "Objectif √† 3 ans",
                                "long_terme": "Objectif √† 5 ans"
                            }}
                        }}
                    ]
                }}
            }},
            "social": {{ ... }},
            "gouvernance": {{ ... }}
        }}

        ATTENTION:
        - Vous DEVEZ traiter ABSOLUMENT TOUS les enjeux mentionn√©s
        - Pour chaque enjeu, fournissez AU MINIMUM 5 √©l√©ments pour chaque cat√©gorie
        - Le nombre d'√©l√©ments doit √™tre adapt√© √† l'importance de l'enjeu (jusqu'√† 10 par cat√©gorie)
        - Chaque √©l√©ment doit √™tre d√©taill√© et sp√©cifique √† l'enjeu
        - Citez les paragraphes CSRD pour chaque datapoint
        - Ne limitez PAS le nombre d'enjeux trait√©s
        - Assurez-vous que la r√©ponse est un JSON valide et complet
        """

def company_profile_section():
    """Section pour la description d√©taill√©e de l'entreprise"""
    st.header("üìã Profil de l'entreprise")
    
    company_description = st.text_area(
        "Description g√©n√©rale de l'entreprise",
        height=150,
        help="D√©crivez votre entreprise en d√©tail (taille, march√©s, implantation g√©ographique, etc.)"
    )
    
    col1, col2 = st.columns(2)
    
    with col1:
        industry_sector = st.text_area(
            "Secteur d'activit√©",
            height=100,
            help="D√©crivez votre secteur d'activit√© et ses sp√©cificit√©s"
        )
    
    with col2:
        business_model = st.text_area(
            "Mod√®le d'affaires",
            height=100,
            help="Expliquez votre mod√®le d'affaires et sa cha√Æne de valeur"
        )
    
    specific_features = st.text_area(
        "Caract√©ristiques sp√©cifiques",
        height=150,
        help="D√©taillez les particularit√©s qui distinguent votre entreprise (innovation, technologies, contraintes r√©glementaires, etc.)"
    )
    
    return {
        "company_description": company_description,
        "industry_sector": industry_sector,
        "business_model": business_model,
        "specific_features": specific_features
    }

def priority_issues_section():
    """Section pour identifier les enjeux prioritaires"""
    st.header("üéØ Enjeux prioritaires")
    
    st.info("Identifiez et d√©crivez les enjeux ESG prioritaires pour votre entreprise")
    
    environmental_issues = st.text_area(
        "Enjeux environnementaux",
        height=100,
        help="D√©crivez les enjeux environnementaux sp√©cifiques √† votre activit√©"
    )
    
    social_issues = st.text_area(
        "Enjeux sociaux",
        height=100,
        help="D√©crivez les enjeux sociaux et soci√©taux pertinents"
    )
    
    governance_issues = st.text_area(
        "Enjeux de gouvernance",
        height=100,
        help="D√©crivez les enjeux de gouvernance importants"
    )
    
    return {
        "environmental": environmental_issues,
        "social": social_issues,
        "governance": governance_issues
    }

def display_results(results: Dict):
    """Affiche les r√©sultats de l'analyse"""
    st.header("üìä Analyse CSRD d√©taill√©e")
    
    if not results:
        st.warning("Aucun r√©sultat √† afficher")
        return

    # Option pour afficher les d√©tails
    show_details = st.checkbox("Afficher/Masquer tous les d√©tails", value=True)
    
    # D√©finition des piliers
    pillars = {
        "environnement": "üåç Environnement",
        "social": "üë• Social",
        "gouvernance": "‚öñÔ∏è Gouvernance"
    }
    
    # Cr√©ation des tabs avec compteurs
    tab_names = [f"{name} ({len(results.get(pid, {}))} enjeux)" 
                 for pid, name in pillars.items()]
    tabs = st.tabs(tab_names)
    
    rows = []  # Pour l'export Excel
    
    for (pilier_id, pilier_name), tab in zip(pillars.items(), tabs):
        if pilier_id in results:
            with tab:
                for enjeu, details in results[pilier_id].items():
                    with st.expander(f"üéØ Enjeu : {enjeu}", expanded=show_details):
                        # Description
                        if "description" in details:
                            st.markdown("### üìù Description")
                            st.write(details["description"])
                        
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            # Impacts
                            st.markdown("### üí´ Impacts")
                            if "impacts" in details:
                                st.markdown("#### ‚úÖ Impacts positifs")
                                if "positifs" in details["impacts"]:
                                    for impact in details["impacts"]["positifs"]:
                                        st.write(f"- {impact}")
                                
                                st.markdown("#### ‚ùå Impacts n√©gatifs")
                                if "negatifs" in details["impacts"]:
                                    for impact in details["impacts"]["negatifs"]:
                                        st.write(f"- {impact}")
                            
                            # Risques
                            st.markdown("### ‚ö†Ô∏è Risques")
                            if "risques" in details:
                                if "niveau" in details["risques"]:
                                    st.write(f"**Niveau de risque :** {details['risques']['niveau']}")
                                if "horizon" in details["risques"]:
                                    st.write(f"**Horizon :** {details['risques']['horizon']}")
                                if "liste" in details["risques"]:
                                    st.markdown("**Risques identifi√©s :**")
                                    for risque in details["risques"]["liste"]:
                                        st.write(f"- {risque}")
                                if "mesures_attenuation" in details["risques"]:
                                    st.markdown("**üõ°Ô∏è Mesures d'att√©nuation :**")
                                    for mesure in details["risques"]["mesures_attenuation"]:
                                        st.write(f"- {mesure}")
                        
                        with col2:
                            # Opportunit√©s
                            st.markdown("### üéØ Opportunit√©s")
                            if "opportunites" in details:
                                if "potentiel" in details["opportunites"]:
                                    st.write(f"**Potentiel :** {details['opportunites']['potentiel']}")
                                if "horizon" in details["opportunites"]:
                                    st.write(f"**Horizon :** {details['opportunites']['horizon']}")
                                if "liste" in details["opportunites"]:
                                    st.markdown("**Opportunit√©s identifi√©es :**")
                                    for opportunite in details["opportunites"]["liste"]:
                                        st.write(f"- {opportunite}")
                                if "actions_saisie" in details["opportunites"]:
                                    st.markdown("**üöÄ Actions propos√©es :**")
                                    for action in details["opportunites"]["actions_saisie"]:
                                        st.write(f"- {action}")
                            
                            # Datapoints CSRD
                            if "datapoints_csrd" in details and isinstance(details["datapoints_csrd"], list):
                                st.markdown("### üìä Datapoints CSRD conseill√©s")
                                for idx, datapoint in enumerate(details["datapoints_csrd"], 1):
                                    if not isinstance(datapoint, dict):
                                        st.error(f"Format de datapoint invalide pour l'enjeu {enjeu}")
                                        continue
                                    
                                    st.markdown(f"#### üìå Datapoint {idx}: {datapoint.get('indicateur', 'Non sp√©cifi√©')}")
                                    st.write(f"**Type :** {datapoint.get('type', 'Non sp√©cifi√©')}")
                                    for field, label in [
                                        ('description', 'Description'),
                                        ('methodologie', 'M√©thodologie'),
                                        ('frequence', 'Fr√©quence')
                                    ]:
                                        if field in datapoint:
                                            st.write(f"**{label} :** {datapoint[field]}")
                                    
                                    if "objectifs" in datapoint and isinstance(datapoint["objectifs"], dict):
                                        st.markdown("**Objectifs :**")
                                        obj = datapoint["objectifs"]
                                        for term, label in [
                                            ('court_terme', 'Court terme'),
                                            ('moyen_terme', 'Moyen terme'),
                                            ('long_terme', 'Long terme')
                                        ]:
                                            if term in obj:
                                                st.write(f"- {label} : {obj[term]}")

                                    # Ajout pour l'export Excel
                                    if isinstance(datapoint.get('objectifs'), dict):
                                        row_data = {
                                            "Pilier": pilier_name,
                                            "Enjeu": enjeu,
                                            "Datapoint": datapoint.get('indicateur', ''),
                                            "Type": datapoint.get('type', ''),
                                            "Description Datapoint": datapoint.get('description', ''),
                                            "M√©thodologie": datapoint.get('methodologie', ''),
                                            "Fr√©quence": datapoint.get('frequence', ''),
                                            "Objectif CT": datapoint['objectifs'].get('court_terme', ''),
                                            "Objectif MT": datapoint['objectifs'].get('moyen_terme', ''),
                                            "Objectif LT": datapoint['objectifs'].get('long_terme', ''),
                                            "Description Enjeu": details.get('description', ''),
                                            "Impacts Positifs": ", ".join(details.get('impacts', {}).get('positifs', [])),
                                            "Impacts N√©gatifs": ", ".join(details.get('impacts', {}).get('negatifs', [])),
                                            "Risques": ", ".join(details.get('risques', {}).get('liste', [])),
                                            "Niveau Risque": details.get('risques', {}).get('niveau', ''),
                                            "Horizon Risque": details.get('risques', {}).get('horizon', ''),
                                            "Mesures Att√©nuation": ", ".join(details.get('risques', {}).get('mesures_attenuation', [])),
                                            "Opportunit√©s": ", ".join(details.get('opportunites', {}).get('liste', [])),
                                            "Potentiel Opportunit√©": details.get('opportunites', {}).get('potentiel', ''),
                                            "Horizon Opportunit√©": details.get('opportunites', {}).get('horizon', ''),
                                            "Actions Saisie": ", ".join(details.get('opportunites', {}).get('actions_saisie', []))
                                        }
                                        rows.append(row_data)
    
    # Export Excel
    if rows:
        df = pd.DataFrame(rows)
        buffer = io.BytesIO()
        with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name='Analyse CSRD')
        
        st.download_button(
            label="üì• T√©l√©charger l'analyse compl√®te (Excel)",
            data=buffer.getvalue(),
            file_name=f"analyse_csrd_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

def initialize_session_state():
    """Initialise les variables de session Streamlit"""
    if 'gpt' not in st.session_state:
        st.session_state.gpt = GPTInterface()
    if 'results' not in st.session_state:
        st.session_state.results = None

def main():
    st.title("üéØ Analyseur CSRD - Identification des IRO")
    
    initialize_session_state()
    
    with st.sidebar:
        st.header("‚ÑπÔ∏è Guide d'utilisation")
        st.write("""
        1. D√©crivez votre entreprise en d√©tail
        2. Identifiez vos enjeux prioritaires
        3. Lancez l'analyse pour obtenir des IRO personnalis√©s
        """)
        
        st.header("üí° Conseils")
        st.write("""
        - Soyez pr√©cis dans vos descriptions
        - N'h√©sitez pas √† mentionner les sp√©cificit√©s
        - Pensez √† long terme dans l'identification des enjeux
        """)
    
    # Sections principales
    company_profile = company_profile_section()
    priority_issues = priority_issues_section()
    
    # Bouton d'analyse
    if st.button("üîç Lancer l'analyse"):
        if not all([company_profile["company_description"], 
                   company_profile["industry_sector"],
                   priority_issues["environmental"] or 
                   priority_issues["social"] or 
                   priority_issues["governance"]]):
            st.error("Veuillez remplir au moins la description de l'entreprise, le secteur d'activit√© et un enjeu prioritaire")
            return
        
        context = {
            **company_profile,
            "priority_issues": priority_issues
        }
        
        st.session_state.results = st.session_state.gpt.generate_iros(context)
        
    # Affichage des r√©sultats
    if st.session_state.results:
        display_results(st.session_state.results)

if __name__ == "__main__":
    main()
